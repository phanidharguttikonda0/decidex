%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 801
%%HiResBoundingBox: 0 0 2391.1199 800.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 800.88 re
W
q
[0.24 0 0 -0.24 0 800.88] cm
q
0 0 9962.5 3337.5 re
W*
q
[32.361275 0 0 32.352127 -445.26239 212.9276] cm
65.531998 53.660999 m
68.004997 51.32 67.612999 48.015999 64.662994 46.32 c
59.099998 43.118 l
56.149998 41.421001 54.376999 37.320999 55.158997 34.008999 c
61.857998 5.610998 l
62.638996 2.298998 61.255997 1.502998 58.784996 3.843998 c
24.466999 36.339001 l
21.994999 38.68 22.386999 41.983002 25.337 43.681 c
30.899 46.881001 l
33.848 48.579002 35.623001 52.679001 34.841999 55.990002 c
28.140999 84.388 l
27.360998 87.699997 28.742998 88.495003 31.214998 86.154999 c
65.531998 53.660999 l
h
f
Q
q
[26.469463 0 0 26.461983 2168.6262 1142.09863] cm
32.813 27.344 m
31.823389 29.739901 30.4692 31.719 28.7505 33.281502 c
26.979599 34.948101 24.896299 36.250301 22.500401 37.187801 c
20.104502 38.125301 17.4223 38.594101 14.453501 38.594101 c
5.781601 38.594101 l
5.781601 32.656601 l
14.375401 32.656601 l
16.3545 32.656601 18.151402 32.344101 19.766001 31.719101 c
21.328501 31.094101 22.6826 30.2087 23.828501 29.062801 c
24.974401 27.916903 25.8598 26.562801 26.4848 25.000301 c
27.1098 23.437801 27.4223 21.719002 27.4223 19.844002 c
27.4223 18.021101 27.1098 16.328402 26.4848 14.765902 c
25.8598 13.151301 24.9744 11.823202 23.828501 10.781502 c
22.786901 9.687702 21.432701 8.802402 19.766102 8.125202 c
18.099503 7.500202 16.302601 7.187702 14.375502 7.187702 c
5.781702 7.187702 l
5.781702 1.250202 l
14.453602 1.250202 l
17.214003 1.250202 19.870201 1.744972 22.422401 2.734602 c
24.818302 3.619992 26.927601 4.948102 28.750502 6.719002 c
30.521402 8.333602 31.875502 10.312802 32.813004 12.656502 c
33.802612 15.052402 34.297405 17.500301 34.297405 20.000301 c
34.297405 22.708702 33.802635 25.156601 32.813004 27.344101 c
32.813 27.344 l
h
47.0938 1.406 m
74.906799 1.406 l
74.906799 7.3435 l
47.0938 7.3435 l
47.0938 1.406 l
47.0938 1.406 l
h
47.0938 32.6562 m
74.827797 32.6562 l
74.827797 38.5937 l
47.093796 38.5937 l
47.093796 32.6562 l
47.0938 32.6562 l
h
47.0938 16.875 m
72.171799 16.875 l
72.171799 22.7344 l
47.0938 22.7344 l
47.0938 16.875 l
h
89.265602 12.5 m
90.203102 10.2084 91.557205 8.255301 93.328003 6.6407 c
94.942604 5.0261 97.026001 3.724 99.578102 2.7344 c
102.130203 1.7448 104.8125 1.25 107.625 1.25 c
116.296898 1.25 l
116.296898 7.1875 l
107.703094 7.1875 l
105.671791 7.1875 103.874992 7.52602 102.312492 8.2031 c
100.645889 8.88021 99.291695 9.7656 98.250092 10.8594 c
97.156288 11.901 96.270988 13.255199 95.593788 14.9218 c
94.968788 16.432199 94.656288 18.124899 94.656288 19.999901 c
94.656288 21.874903 94.968788 23.5676 95.593788 25.078001 c
96.218788 26.640501 97.104187 27.9946 98.250092 29.140501 c
99.291695 30.1821 100.645889 31.0415 102.312492 31.718601 c
103.979095 32.343601 105.775993 32.656101 107.703094 32.656101 c
116.29689 32.656101 l
116.29689 38.593601 l
107.624992 38.593601 l
104.708389 38.593601 102.052094 38.124851 99.656189 37.187302 c
97.156189 36.145702 95.046791 34.817501 93.328087 33.2029 c
91.55719 31.536301 90.203087 29.5571 89.265587 27.265499 c
88.275978 24.869598 87.781189 22.4217 87.781189 19.9217 c
87.781189 17.2654 88.275955 14.7915 89.265587 12.4998 c
89.265602 12.5 l
h
146.281006 16.875 m
146.281006 1.328 l
139.718506 1.328 l
139.718506 38.672001 l
146.281006 38.672001 l
146.281006 16.875 l
h
196.813 27.344 m
195.82339 29.739901 194.46921 31.719 192.7505 33.281502 c
190.9796 34.948101 188.8963 36.250301 186.5004 37.187801 c
184.10449 38.125301 181.4223 38.594101 178.45349 38.594101 c
169.78159 38.594101 l
169.78159 32.656601 l
178.37538 32.656601 l
180.35448 32.656601 182.15138 32.344101 183.76598 31.719101 c
185.32848 31.094101 186.68257 30.2087 187.82848 29.062801 c
188.97438 27.916903 189.85977 26.562801 190.48477 25.000301 c
191.10977 23.437801 191.42227 21.719002 191.42227 19.844002 c
191.42227 18.021101 191.10977 16.328402 190.48477 14.765902 c
189.85977 13.151301 188.97437 11.823202 187.82848 10.781502 c
186.78688 9.687702 185.43268 8.802402 183.76608 8.125202 c
182.09949 7.500202 180.30258 7.187702 178.37549 7.187702 c
169.78169 7.187702 l
169.78169 1.250202 l
178.4536 1.250202 l
181.214 1.250202 183.87019 1.744972 186.42239 2.734602 c
188.8183 3.619992 190.9276 4.948102 192.75049 6.719002 c
194.52139 8.333602 195.87549 10.312802 196.81299 12.656502 c
197.8026 15.052402 198.29739 17.500301 198.29739 20.000301 c
198.29739 22.708702 197.80263 25.156601 196.81299 27.344101 c
196.813 27.344 l
h
211.0938 1.406 m
238.9068 1.406 l
238.9068 7.3435 l
211.0938 7.3435 l
211.0938 1.406 l
211.0938 1.406 l
h
211.0938 32.6562 m
238.82779 32.6562 l
238.82779 38.5937 l
211.0938 38.5937 l
211.0938 32.6562 l
h
211.0938 16.875 m
236.1718 16.875 l
236.1718 22.7344 l
211.0938 22.7344 l
211.0938 16.875 l
h
262.48401 29.375 m
265.9996 24.6875 l
265.92148 24.53125 l
262.48401 29.375 l
h
282.875 1.406 m
275.375 1.406 l
266.07809 14.765 l
256.85928 1.406 l
249.12488 1.406 l
262.17188 19.687 l
248.65587 38.593002 l
257.01526 38.593002 l
282.875 1.406 l
h
283.34399 38.5937 m
273.03101 23.984699 l
269.12469 29.219099 l
275.68719 38.594101 l
283.34351 38.594101 l
283.34399 38.5937 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
